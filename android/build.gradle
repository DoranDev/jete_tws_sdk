group 'id.doran.jete_tws_sdk'
version '1.0-SNAPSHOT'


buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }
    ext.hilt_version='2.41'
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"
    }
}

String localMavenPath = project.mkdir("build").absolutePath

allprojects {
    repositories {
        google()
        maven { url "file://$localMavenPath" }
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.dagger.hilt.android'

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin' // Add Kotlin sources
        main.java.srcDirs += 'src/main/java'   // Add Java sources
//        test.java.srcDirs += 'src/test/kotlin'
        main.assets.srcDirs = ['assets']
 //       main.jniLibs.srcDirs = ['libs']
//        main.resources.srcDirs = ['devicemanager','fota','utils']
    }

    defaultConfig {
        minSdkVersion 21
    }


    flavorDimensions "custom"
//    productFlavors {
//        bluetrum {
//            dimension "custom"
//            buildConfigField("String", "BROADCAST_SERVICE_UUID", '"0000fdb3-0000-1000-8000-00805f9b34fb"')
//            buildConfigField("int", "MANUFACTURER_ID", '0x0642')
//            buildConfigField("int", "BRAND_ID", '0') // 24bit, High 8bit is AgentId
//            buildConfigField("String", "CUSTOM_SPP_UUID", '"B6632277-0642-458B-A7A0-23FB1DC92C93"')
//            buildConfigField("String", "WEB_URL_LEGAL", '"http://www.bluetrum.com/doc/abmate_agreement_220228.html"')
//            buildConfigField("String", "WEB_URL_PRIVACY", '"http://www.bluetrum.com/doc/abmate_privacy_220228.html"')
//        }
//    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    lint {
        abortOnError false
    }

    dependencies {
       // implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'androidx.appcompat:appcompat:1.4.1'
        implementation 'com.google.android.material:material:1.6.0'
        implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
        implementation 'androidx.navigation:navigation-fragment:2.4.2'
        implementation 'androidx.navigation:navigation-ui:2.4.2'
        implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
        implementation "androidx.lifecycle:lifecycle-common-java8:2.4.1"
        implementation "com.google.code.gson:gson:2.8.6"
//        testImplementation 'junit:junit:4.13.2'
//        androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//        androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
        implementation 'androidx.preference:preference:1.2.0'

        implementation 'androidx.core:core-splashscreen:1.0.0-rc01'

//        implementation project(':devicemanager')
//        implementation project(':fota')
//        implementation project(':utils')
        // Nordic的库对不同系统版本做了兼容，直接用
        implementation 'no.nordicsemi.android.support.v18:scanner:1.6.0'


        ext.hilt_version='2.41'
        implementation "com.google.dagger:hilt-android:$hilt_version"
        annotationProcessor "com.google.dagger:hilt-android-compiler:$hilt_version"
       // kapt "com.google.dagger:hilt-compiler:$hilt_version"

        def room_version = "2.4.2"

        implementation "androidx.room:room-runtime:$room_version"
        annotationProcessor "androidx.room:room-compiler:$room_version"

        coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

        implementation 'pub.devrel:easypermissions:3.0.0'
        implementation 'com.jakewharton.timber:timber:4.7.1'
        // 文件选择器，OTA暂时用
   //     implementation 'me.rosuh:AndroidFilePicker:0.6.4'
   //     implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

//        implementation files('libs/equalizerview-release.aar') // 均衡器
//        implementation files('libs/segmentedbar-release.aar') // 分段控件
//        implementation files('libs/MusicPlayer-release.aar') // 音乐播放器
    }

}


//String aarPath = localMavenPath
//task useAar {
//    File file = project.file("libs")
//    if (file.exists() && file.isDirectory()) {
//        file.listFiles(new FileFilter() {
//            @Override
//            boolean accept(File pathname) {
//                return pathname.name.endsWith(".aar")
//            }
//        }).each { item ->
//            String aarName = item.name.substring(0, item.name.length() - 4)
//            String[] aarInfo = aarName.split("-")
//            String sha1 = getFileSha1(item)
//            String md5 = getFileMD5(item)
//            println("aar: " + aarInfo + " file sha1:" + sha1 + " md5:" + md5)
//            String fromStr = item.path
//            String intoStr = aarPath + "/" + aarInfo[0].replace(".", "/") + "/" + aarInfo[1] + "/" + aarInfo[2]
//            String newName = aarInfo[1] + "-" + aarInfo[2] + ".aar"
//
//            project.copy {
//                from fromStr
//                into intoStr
//                rename(item.name, newName)
//            }
//
//            project.file(intoStr + "/" + newName + ".md5").write(md5)
//            project.file(intoStr + "/" + newName + ".sha1").write(sha1)
//
//            String pomPath = intoStr + "/" + newName.substring(0, newName.length() - 4) + ".pom"
//            project.file(pomPath).write(createPomStr(aarInfo[0], aarInfo[1], aarInfo[2]))
//            project.file(pomPath + ".md5").write(getFileMD5(project.file(pomPath)))
//            project.file(pomPath + ".sha1").write(getFileSha1(project.file(pomPath)))
//
//            String metadataPath = project.file(intoStr).getParentFile().path + "/maven-metadata.xml"
//            project.file(metadataPath).write(createMetadataStr(aarInfo[0], aarInfo[1], aarInfo[2]))
//            project.file(metadataPath + ".md5").write(getFileMD5(project.file(metadataPath)))
//            project.file(metadataPath + ".sha1").write(getFileSha1(project.file(metadataPath)))
//            dependencies {
//                implementation "${aarInfo[0]}:${aarInfo[1]}:${aarInfo[2]}"
//            }
//        }
//    }
//}
//
//public static String createMetadataStr(String groupId, String artifactId, String version) {
//    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
//            "<metadata>\n" +
//            "  <groupId>$groupId</groupId>\n" +
//            "  <artifactId>$artifactId</artifactId>\n" +
//            "  <versioning>\n" +
//            "    <release>$version</release>\n" +
//            "    <versions>\n" +
//            "      <version>$version</version>\n" +
//            "    </versions>\n" +
//            "    <lastUpdated>${new Date().format('yyyyMMdd')}000000</lastUpdated>\n" +
//            "  </versioning>\n" +
//            "</metadata>\n"
//}
//
//public static String createPomStr(String groupId, String artifactId, String version) {
//    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
//            "<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n" +
//            "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
//            "  <modelVersion>4.0.0</modelVersion>\n" +
//            "  <groupId>$groupId</groupId>\n" +
//            "  <artifactId>$artifactId</artifactId>\n" +
//            "  <version>$version</version>\n" +
//            "  <packaging>aar</packaging>\n" +
//            "</project>\n"
//}
//
//public static String getFileSha1(File file) {
//    FileInputStream input = null;
//    try {
//        input = new FileInputStream(file);
//        MessageDigest digest = MessageDigest.getInstance("SHA-1");
//        byte[] buffer = new byte[1024 * 1024 * 10];
//
//        int len = 0;
//        while ((len = input.read(buffer)) > 0) {
//            digest.update(buffer, 0, len);
//        }
//        String sha1 = new BigInteger(1, digest.digest()).toString(16);
//        int length = 40 - sha1.length();
//        if (length > 0) {
//            for (int i = 0; i < length; i++) {
//                sha1 = "0" + sha1;
//            }
//        }
//        return sha1;
//    }
//    catch (IOException e) {
//        System.out.println(e);
//    }
//    catch (NoSuchAlgorithmException e) {
//        System.out.println(e);
//    }
//    finally {
//        try {
//            if (input != null) {
//                input.close();
//            }
//        }
//        catch (IOException e) {
//            System.out.println(e);
//        }
//    }
//}
//
//public static String getFileMD5(File file) {
//    FileInputStream input = null;
//    try {
//        input = new FileInputStream(file);
//        MessageDigest digest = MessageDigest.getInstance("MD5");
//        byte[] buffer = new byte[1024 * 1024 * 10];
//
//        int len = 0;
//        while ((len = input.read(buffer)) > 0) {
//            digest.update(buffer, 0, len);
//        }
//        String md5 = new BigInteger(1, digest.digest()).toString(16);
//        int length = 32 - md5.length();
//        if (length > 0) {
//            for (int i = 0; i < length; i++) {
//                md5 = "0" + md5;
//            }
//        }
//        return md5;
//    }
//    catch (IOException e) {
//        System.out.println(e);
//    }
//    catch (NoSuchAlgorithmException e) {
//        System.out.println(e);
//    }
//    finally {
//        try {
//            if (input != null) {
//                input.close();
//            }
//        }
//        catch (IOException e) {
//            System.out.println(e);
//        }
//    }
//}